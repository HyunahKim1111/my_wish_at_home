* {%%} 템플릿 태그!
* ctrl+클릭 소스코드를 볼 수 있다.
* py를 새로 생성했을 때는 서버를 한 번 껐다가 다시 켜야 한다.
* view -> template -> url 만들고
* 링크를 달려면?
a href="{% url 'update' %}" url 템플릿 태그를 사용! 링크에 넣어줘!
* 인스턴스
하나하나 글을 써가게 되면 데이터 베이스에 있는 자료 1건당 인스턴스 단위로 다루게 됨.
* settings.py에서 TEMPLATES에 대해서
지금까지 templates을 app폴더 밑에 templates를 만들어서 html을 넣어놨는데 이건 어떤 옵션때문에 자동으로 읽히고 있는거야.
그건 바로 'APP_DIRS': True, 이거때문. 이건 이 프로젝트에 사용하고 있는 각 app 하위에 있는 템플릿들을 자동으로 읽고있음.
그대신 app안에 있지 않은 별도의 디렉토리 혹은 app안에 있지만 templates라는 이름을 갖지 않은 다른 폴더에 templates를 넣고싶으면 'DIRS': [],여기에 추가해줘야 해.
'DIRS': [],
'APP_DIRS': True,
* {% block title %}{% endblock %} 내용을 덮어쓰기 할 수 있다.

4장 04 List뷰 만들기
Listview는 관리자 페이지에서 등록한 목록들을 보는 것

4장 05 Create뷰 만들기
추가를 할 수 있음

4장 06 Detail뷰 만들기

1.웹 페이지에서 add Bookmark버튼을 누르면 들어가야하니까 경로를 {% url 'add' %}라고 지정.(html페이지)

4장 07 Detail 뷰 만들기2

detail뷰 만들어서 링크도 이어지도록 만들어보자.

2. view로 이동
from django.views.generic.detail import DetailView 추가
class BookmarkDetailView(DetailView):
    model = Bookmark (추가)

3. url 이동
from .views import * (추가)
path('detail/<int:pk>/', BookmarkDetailView.as_view(), name='detail'), (추가)

<pk>이렇게 하면 기본적으로 문자열로 들어감. <int:pk> 0을 포함한 양의 정수랑 매칭이 됨.
* slug란? url에서 detail/뒤에 slug방식으로 오면 문자열로 오게 됨. (자세히 알려주지는 않음)

드디어 list페이지의  detail에 링크를 걸게 됩니다.

4. bookmark_list.html로 이동
<td><a href="{% url 'detail' pk=object.ad %}">{{bookmark.site_name}}</a></td>

{% url 'detail' pk=object.id %}
'detail'이란 이름을 가진 url을 보여줘. detail/뒤에 숫자는  pk=object.id 이렇게 표기.

4장 08 Detail update뷰 만들기
북마크 수정기능을 만들어보자.
update뷰도 어떤 글을 수정해야할지 지정해줘야하니까 <int:pk> 이런게 필요해.

1. (views.py)
from django.views.generic.edit import CreateView, UpdateView
class BookmarkUpdateView(UpdateView):
    model = Bookmark
    fields = ['site_name','url'] # 어떤 정보를 수정해줄거냐?
    template_name_suffix = '_update'

2. urls.py
    path('update/<int:pk>/', BookmarkUpdateView.as_view(), name='update'),

3. bookmark_list.html

링크를 달려면?
a href="{% url 'update' %}" url 템플릿 태그를 사용! 링크에 넣어줘!

4. models.py

from django.urls import reverse (추가)
# model안에서는 reverse를 쓰지만 class형 view 안에서 field값으로 쓸 때는 reverse_lazy를 써야 한다. (get_absolute_url로 url 만들어 줄 때)
    def get_absolute_url(self): # 해당 인스턴스의 상세페이지는 뭐냐?
        return reverse('detail', args=[str(self.id)]) (추가)

참고) views.py에서는 
from django.urls import reverse_lazy (추가)
success_url = reverse_lazy('list') (추가)

04장 09 Delete뷰 만들기
북마크 삭제기능 만들기

04 10 템플릿 분리와 확장
중복되는 태그를 하나의 레이아웃 템플릿을 만들어서 확장해서 사용하기.
{% extends 'base.html'%}
{% block title %}Bookmark Add{% endblock %}

04장 11 부트스트랩 적용하기
반응형 작업: grid, row 등으로 깔끔하게 작업할 수 있다.

04장 12 정적 파일 적용하기
static파일!
settings.py에서 폴더를 명시해줘야 해!
1.settings.py
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] 
# 프로젝트 루트 폴더에 있는 static폴더를 읽으라는 명령. (추가)

2. 루트에 static이라는 폴더를 만들고 거기에 .css파일을 만들어서 css내용 적용하기.
static이라는 폴더를 만들고 거기에 .css파일을 만들어서 원하는 스타일 시트 내용을 넣을 수 있음.
만약 이 css파일이 모든 페이지에 적용될 거라면 이걸

3. base.html
base.html에 bootstrap다음에 태그를 넣어주기. {% load static %} 로드 스태틱이라는 템플릿 태그

    {% load static %}
    <link rel="stylesheet" href="{% static 'style.css '%}">
    <!-- static이라는 모듈에 관련된 내용들을 불러와서 사용을 하겠다. static app에 있는 custom 탬플릿 태그들이 불러와지게 됨.-->

04장 13 파이썬 애니웨어에 배포하기

무료 호스팅 서비스
파이썬 애니웨어
AWS
페로코
1년무료 유료 전환
배포를 하려면 settings.py에 수정해야 할 내용들이 좀 있어.